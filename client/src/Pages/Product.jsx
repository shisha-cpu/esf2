import { useState, useEffect } from "react";
import axios from "axios";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation } from "swiper/modules";
import "swiper/swiper-bundle.css";
import './Product.css';
import { useParams } from "react-router-dom"; 

export function Product() {
  const [products, setProducts] = useState({});
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedItem, setSelectedItem] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [priceRange, setPriceRange] = useState([0, 1000000]);
  const [selectedManufacturer, setSelectedManufacturer] = useState("");
  const [visibleProductsCount, setVisibleProductsCount] = useState(20);
  const [favourites, setFavourites] = useState([]);
  const [cart, setCart] = useState([]);
  const { categoryName } = useParams();
 
  
  const manufacturers = [
    "–ö–∏—Ç–∞–π", "–†–æ—Å—Å–∏—è", "Akces-Med (–ü–æ–ª—å—à–∞)", "Rebotec (–ì–µ—Ä–º–∞–Ω–∏—è)", 
    "Barry (–¢–∞–π–≤–∞–Ω—å)", "–Ø –º–æ–≥—É (–†–æ—Å—Å–∏—è)", "Ortonica (–ö–∏—Ç–∞–π)", 
    "–ú–µ–≥–∞-–û–ø—Ç–∏–º (–ö–ù–†)", "Titan (–ì–µ—Ä–º–∞–Ω–∏—è)", "MyWam (–ü–æ–ª—å—à–∞)", 
    "–í–µ–ª–æ–õ–∏–¥–µ—Ä", "RT (–†–æ—Å—Å–∏—è)", "Otto Bock (–ì–µ—Ä–º–∞–Ω–∏—è)", "HOGGI (–ì–µ—Ä–º–∞–Ω–∏—è)", 
    "PATRON Bohemia (–ß–µ—Ö–∏—è)", "Vermeiren (–ë–µ–ª—å–≥–∏—è)", "LIW (–ü–æ–ª—å—à–∞)", 
    "THOMASHILFEN (–ì–µ—Ä–º–∞–Ω–∏—è)", "Armed", "Kinesis", "Meyra (–ì–µ—Ä–º–∞–Ω–∏—è)", 
    "Sorg (–ì–µ—Ä–º–∞–Ω–∏—è)", "Fumagalli (–ò—Ç–∞–ª–∏—è)", "VITEA CARE (–ü–æ–ª—å—à–∞)", 
    "–ö–∞—Ç–∞—Ä–∂–∏–Ω–∞ (–†–æ—Å—Å–∏—è)", "Convaid (–°–®–ê)", "IMEDIX (–ü–æ–ª—å—à–∞)"
  ];

  useEffect(() => {
    window.scrollTo(0, 0); 
    axios.get('../data.json')
      .then(res => {
        console.log(res.data);
        setProducts(res.data);
      })
      .catch(err => console.log(err));
  
    const storedFavourites = JSON.parse(localStorage.getItem("favourites")) || [];
    const storedCart = JSON.parse(localStorage.getItem("cart")) || [];
  
    setFavourites(storedFavourites);
    setCart(storedCart);
  }, []);
  

  const handleCategorySelect = (category) => {
    setSelectedCategory(category);
    setVisibleProductsCount(20);
  };
useEffect(()=>{
  if (categoryName) {
    handleCategorySelect(categoryName)
    
  }
},[])
  const handleAddToCart = (item) => {
    try {
      console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É', item); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
  
      // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–∑–±–∏–≤–∞–µ–º –∏—Ö –Ω–∞ –º–∞—Å—Å–∏–≤
      const cleanedPhotos = item.photo.replace(/\r\n/g, ', ').split(', ');
  
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
      const itemToAdd = {
        ...item,
        photo: cleanedPhotos,  // –¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤
      };
  
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
      const updatedCart = [...cart, itemToAdd];
      setCart(updatedCart);
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞:', updatedCart);
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
      localStorage.setItem("cart", JSON.stringify(updatedCart));
      console.log('–ö–æ—Ä–∑–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
      
      alert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
    }
  };
  
  
  

  const handleShowDetails = (item) => {
    setSelectedItem(item);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedItem(null);
  };

  const toggleFavourite = (item) => {
    let updatedFavourites;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    const isFavourite = favourites.some(fav => fav.code === item.code);
    
    if (isFavourite) {
      // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      updatedFavourites = favourites.filter(fav => fav.code !== item.code);
      console.log('–£–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', item);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      updatedFavourites = [...favourites, item];
      console.log('–î–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', item);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    setFavourites(updatedFavourites);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem("favourites", JSON.stringify(updatedFavourites));
};

const filteredProducts = () => {
  const allProducts = Object.values(products).flat();

  // Ensure that products[selectedCategory] is valid
  const currentProducts = selectedCategory && products[selectedCategory] ? products[selectedCategory] : allProducts;

  return currentProducts
    .filter(item => {
      const matchesSearch = item.name && item.name.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesPrice = item.price >= priceRange[0] && item.price <= priceRange[1];
      const matchesManufacturer = selectedManufacturer ? item.manufacturer === selectedManufacturer : true;
      return matchesSearch && matchesPrice && matchesManufacturer;
    })
    .slice(0, visibleProductsCount);
};


  const loadMoreProducts = () => {
    setVisibleProductsCount(prevCount => prevCount + 20);
  };

  return (
    <div className="product-page">
      <aside className="filter-panel">
        <h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
        <ul>
          {Object.keys(products).map((category, index) => (
            <li
              key={index}
              onClick={() => handleCategorySelect(category)}
              className={selectedCategory === category ? "active" : ""}
            ><br /><br />
              {category}
            </li>
          ))}
        </ul>
        <h2>–§–∏–ª—å—Ç—Ä—ã</h2>
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
          value={searchTerm}
          onChange={e => setSearchTerm(e.target.value)}
          className="search"
        />
        <div>
          <br />
          <label>–¶–µ–Ω–∞:</label><br />
         –æ—Ç: <input type="number" min="0" max="1000000" value={priceRange[0]} onChange={e => setPriceRange([Number(e.target.value), priceRange[1]])} /> <br />
         –¥–æ: <input type="number" min="0" max="1000000" value={priceRange[1]} onChange={e => setPriceRange([priceRange[0], Number(e.target.value)])} />
        </div>
        <br />
        <label>–í—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:</label>
        <select onChange={e => setSelectedManufacturer(e.target.value)} value={selectedManufacturer}>
          <option value="">–í—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏</option>
          {manufacturers.map((manufacturer, index) => (
            <option key={index} value={manufacturer}>{manufacturer}</option>
          ))}
        </select>
      </aside>

      <div className="product-list">
        <div className="title">
          <h1>–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã</h1>
        </div>
        <div className="category">
          <h2>{selectedCategory ? selectedCategory : "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"}</h2>
          <div className="product-cards">
            {filteredProducts().map((item, itemIndex) => {
              const images = item.photo.replace(/\\r\\n/g, '\n').split('\n');
              const isFavourite = favourites.some(fav => fav.code === item.code);
              return (
                <div key={itemIndex} className="product-card">
                  <Swiper modules={[Navigation]} navigation spaceBetween={10} slidesPerView={1}>
                    {images.map((url, imgIndex) => (
                      <SwiperSlide key={imgIndex}>
                        <img src={url} className="product-img" alt={`${item.name} image ${imgIndex + 1}`} />
                      </SwiperSlide>
                    ))}
                  </Swiper>
                  <h3>{item.name}</h3>
                  <p><strong>–¶–µ–Ω–∞:</strong> {item.price} —Ä—É–±.</p>
                  <div className="product-btns">
                    <button className="add-btn" onClick={() => handleAddToCart(item)}>–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
                    <button onClick={() => handleShowDetails(item)}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                    <button onClick={() => toggleFavourite(item)} style={{background :  0 , margin : 0 , padding : 0}}><span>{isFavourite ? "‚ù§Ô∏è" : "ü§ç"}</span></button>

                  </div>
                </div>
              );
            })}
          </div>
          {filteredProducts().length >= visibleProductsCount && (
            <button onClick={loadMoreProducts} className="load-more">
              –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ
            </button>
          )}
        </div>
      </div>

      {showModal && selectedItem && (
        <div className="modal">
          <div className="modal-content">
            <button className="close-btn" onClick={handleCloseModal}>‚ùå</button>
            <h2>{selectedItem.name}</h2>
            <p>–û–ø–∏—Å–∞–Ω–∏–µ: {selectedItem.description}</p>
            <p>–¶–µ–Ω–∞: {selectedItem.price} —Ä—É–±.</p>
            <p>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {selectedItem.manufacturer}</p>
          </div>
        </div>
      )}
    </div>
  );
}
